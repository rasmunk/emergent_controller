<!DOCTYPE aesl-source>
<network>


<!--list of global events-->
<event size="0" name="Stop"/>
<event size="0" name="Forward"/>
<event size="0" name="Reverse"/>
<event size="0" name="RotateLeft"/>
<event size="0" name="RotateRight"/>
<event size="2" name="SeeNothing"/>
<event size="7" name="ObstacleDetected"/>

<!--list of constants-->


<!--show keywords state-->
<keywords flag="true"/>

<!--node thymio-II-->
<node nodeId="1" name="thymio-II">
    var prox_distance = 2000
    var clear = 1 # Used to declare whether SeeNothing is already established
    var avoiding = 1 # Used to indicate whether an obstacle avoidance is in progress
    var normal_speed = 300 ## Maximum speed
    var rand_storage ## Variable used to store the random number of the math.rand(rand_storage) function
    var rotational_speed = 100 ## speed assigned when a robot has to rotate
    var edge_counter = 0 ## edge counter, used to track how long the robot should turn when it is at an edge

    onevent Stop
        motor.left.target = 0
        motor.right.target = 0

    onevent prox
        if (avoiding != 0) then
            if ((prox.horizontal[3] >= prox_distance) or (prox.horizontal[2] >= prox_distance) or (prox.horizontal[1] >= prox_distance)) then
                clear = 1
                avoiding = 0
                emit ObstacleDetected prox.horizontal
            end
        end

        # Only check for clear if we already made this decision
        if (clear != 0) and (avoiding != 0) then
            if (prox.horizontal[6] &lt; 15 and prox.horizontal[5] &lt; 15 and prox.horizontal[4] &lt; 15
                and prox.horizontal[3] &lt; 15 and prox.horizontal[2] &lt; 15 and prox.horizontal[1] &lt; 15
                and prox.horizontal[0] &lt; 15) then
                clear = 0
                emit SeeNothing [motor.left.target, motor.right.target]
            end
        end

    onevent RotateLeft
        callsub leftside

    onevent RotateRight
        callsub rightside

    onevent Forward
        avoiding = 1
        motor.left.target = 300
        motor.right.target = 300

    onevent Reverse
        callsub backwards

    ## Sub Methods ##
	## Rotate towards the left
    sub leftside
    	motor.left.target = (-normal_speed + (-rotational_speed))
    	motor.right.target = normal_speed + rotational_speed

    ## Rotate towards the right
    sub rightside
    	motor.right.target = (-normal_speed + (-rotational_speed))
    	motor.left.target = normal_speed + rotational_speed

    sub backwards
        motor.left.target = -normal_speed
        motor.right.target = -normal_speed

</node>
</network>
